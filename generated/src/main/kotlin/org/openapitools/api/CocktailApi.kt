/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package org.openapitools.api

import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.Parameter
import io.swagger.v3.oas.annotations.media.Content
import io.swagger.v3.oas.annotations.media.Schema
import io.swagger.v3.oas.annotations.responses.ApiResponse
import org.openapitools.model.CocktailLight
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.PathVariable
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod

@Validated
@RequestMapping("\${api.base-path:}")
interface CocktailApi {

    @Operation(
        summary = "",
        operationId = "getCocktailNames",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = kotlin.String::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/cocktail-names/{name}"],
            produces = ["application/json"]
    )
    fun getCocktailNames(@Parameter(description = "", required = true) @PathVariable("name") name: kotlin.String): ResponseEntity<List<kotlin.String>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "",
        operationId = "getCocktailsByName",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = CocktailLight::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/cocktails/{name}"],
            produces = ["application/json"]
    )
    fun getCocktailsByName(@Parameter(description = "", required = true) @PathVariable("name") name: kotlin.String): ResponseEntity<List<CocktailLight>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
