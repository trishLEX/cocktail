/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package org.openapitools.api

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.openapitools.model.IngredientDTO
import org.openapitools.model.IngredientLightDTO
import org.openapitools.model.IngredientNameDTO
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.*
import javax.validation.Valid
import javax.validation.constraints.NotNull

@Validated
@RequestMapping("\${api.base-path:}")
interface IngredientApi {

    @Operation(
        summary = "",
        operationId = "getIngredient",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = IngredientDTO::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/ingredients/{id}"],
            produces = ["application/json"]
    )
    fun getIngredient(@Parameter(description = "", required = true) @PathVariable("id") id: kotlin.Int,@Parameter(description = "", `in` = ParameterIn.HEADER) @RequestHeader(value = "requestId", required = false) requestId: kotlin.String?): ResponseEntity<IngredientDTO> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "",
        operationId = "getIngredientNames",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = IngredientNameDTO::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/ingredients/names/{name}"],
            produces = ["application/json"]
    )
    fun getIngredientNames(@Parameter(description = "", required = true) @PathVariable("name") name: kotlin.String,@Parameter(description = "", `in` = ParameterIn.HEADER) @RequestHeader(value = "requestId", required = false) requestId: kotlin.String?): ResponseEntity<List<IngredientNameDTO>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "",
        operationId = "getIngredientTypes",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = IngredientLightDTO::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/ingredients/types"],
            produces = ["application/json"]
    )
    fun getIngredientTypes(@Parameter(description = "", `in` = ParameterIn.HEADER) @RequestHeader(value = "requestId", required = false) requestId: kotlin.String?): ResponseEntity<List<IngredientLightDTO>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "",
        operationId = "getIngredients",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = IngredientLightDTO::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/ingredients"],
            produces = ["application/json"]
    )
    fun getIngredients(@NotNull @Parameter(description = "", required = true) @Valid @RequestParam(value = "name", required = true) name: kotlin.String,@Parameter(description = "") @Valid @RequestParam(value = "start", required = false) start: kotlin.Int?,@Parameter(description = "") @Valid @RequestParam(value = "limit", required = false) limit: kotlin.Int?,@Parameter(description = "", `in` = ParameterIn.HEADER) @RequestHeader(value = "requestId", required = false) requestId: kotlin.String?): ResponseEntity<List<IngredientLightDTO>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "",
        operationId = "getIngredientsByIds",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = IngredientLightDTO::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/ingredients-by-id"],
            produces = ["application/json"]
    )
    fun getIngredientsByIds(@NotNull @Parameter(description = "", required = true) @Valid @RequestParam(value = "ids", required = true) ids: kotlin.collections.List<kotlin.Int>,@Parameter(description = "", `in` = ParameterIn.HEADER) @RequestHeader(value = "requestId", required = false) requestId: kotlin.String?): ResponseEntity<List<IngredientLightDTO>> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
